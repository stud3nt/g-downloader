<?php

namespace App\Tests\Functional\Controller\Api;

use App\Entity\Category;
use App\Repository\CategoryRepository;
use App\Tests\Functional\Controller\BasicControllerTestcase;
use App\Utils\StringHelper;
use App\Utils\TestsHelper;

class CategoryControllerTest extends BasicControllerTestcase
{
    /** @var array */
    private $testCategoryData = [];

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->testCategoryData = [
            "numberOfNodes" => 0,
            "description" => StringHelper::randomStr(32),
            "symbol" => "test-category-string",
            "active" => true,
            "name" => "TEST CATEGORY STRING"
        ];
    }

    public function testListing()
    {
        $this->executeAnonymousUserRequest($this->client,'api_categories_list', 'GET', true);
        $this->executeAdminUserRequest($this->client, 'api_categories_list', 'GET', false);

        $response = $this->client->getResponse();
        $responseContent = $response->getContent();

        $this->assertTrue(StringHelper::isJson($responseContent));

        $json = json_decode($responseContent);

        $this->assertEquals(1, $json->status);
        $this->assertNotEmpty($json->data);
        $this->assertIsArray($json->data);

        foreach ($json->data as $row) {
            $this->assertObjectHasAttribute('name', $row);
            $this->assertIsString($row->name);
            break;
        }
    }

    public function testCreate()
    {
        $this->executeAnonymousUserRequest($this->client,'api_categories_create', 'POST', true);

        $this->loginUserIntoClient(TestsHelper::$testAdminUser['username'], $this->client);
        $this->client->request("POST", $this->router->generate("api_categories_create"), $this->testCategoryData);

        $response = $this->client->getResponse();
        $responseContent = $response->getContent();

        $this->assertTrue($response->isSuccessful());
        $this->assertTrue(StringHelper::isJson($responseContent));

        $json = json_decode($responseContent);

        $this->assertEquals(1, $json->status);
        $this->assertEmpty($json->data);

        $testCategory = $this->findCategoryByTestData();

        $this->assertNotEmpty($testCategory);
        $this->assertInstanceOf(Category::class, $testCategory);
        $this->assertIsInt($testCategory->getId());
    }

    public function testDelete()
    {
        $this->executeAnonymousUserRequest($this->client, 'api_categories_delete', 'POST', true);
        $this->loginUserIntoClient(TestsHelper::$testAdminUser['username'], $this->client);

        $testCategory = $this->findCategoryByTestData();

        $this->assertNotEmpty($testCategory);

        $this->testCategoryData['id'] = $testCategory->getId();

        $this->client->request("POST", $this->router->generate("api_categories_delete"), $this->testCategoryData);

        $response = $this->client->getResponse();
        $responseContent = $response->getContent();

        $this->assertTrue($response->isSuccessful());
        $this->assertTrue(StringHelper::isJson($responseContent));

        $json = json_decode($responseContent);

        $this->assertEquals(1, $json->status);
        $this->assertEmpty($json->data);

        $testCategory = $this->findCategoryByTestData();

        $this->assertEmpty($testCategory);
    }

    private function findCategoryByTestData(): ?Category
    {
        $categoryRepository = $this->containerInstance->get(CategoryRepository::class);

        return $categoryRepository->findOneBy([
            'name' => $this->testCategoryData['name'],
            'symbol' => $this->testCategoryData['symbol']
        ]);
    }
}