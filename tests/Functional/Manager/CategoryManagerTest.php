<?php

namespace App\Tests\Functional\Manager;

use App\Entity\Category;
use App\Manager\CategoryManager;
use App\Model\ParserRequest;
use App\Tests\Functional\Manager\Base\BasicManagerTestCase;
use App\Utils\StringHelper;
use App\Utils\TestsHelper;

class CategoryManagerTest extends BasicManagerTestCase
{
    /** @var CategoryManager */
    protected $manager;

    /** @var int */
    protected $categoryCount = 0;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->manager = $this->loadManager(CategoryManager::class);
        $this->categoryCount = $this->manager->getCount();
    }

    public function testGetCategoriesList()
    {
        $categoriesList = $this->manager->getCategoriesList();

        if ($this->categoryCount === 0) {
            $this->assertEmpty($categoriesList);
        } else {
            $this->assertIsArray($categoriesList);

            $firstCategory = $categoriesList[key($categoriesList)];

            $this->assertIsObject($firstCategory);
            $this->assertInstanceOf(Category::class, $firstCategory);
        }
    }

    public function testGetCategoriesModels()
    {
        $categoriesModels = $this->manager->getCategoriesModels();

        if ($this->categoryCount === 0) {
            $this->assertEmpty($categoriesModels);
        } else {
            $this->assertIsArray($categoriesModels);

            $firstModel = $categoriesModels[key($categoriesModels)];

            $this->assertNotEmpty($firstModel);
            $this->assertInstanceOf(\App\Model\Category::class, $firstModel);
        }
    }

    public function testCompleteCategoriesList()
    {
        $parserRequestModel = new ParserRequest();
        $parserRequestData = TestsHelper::generateParserRequestArray();
        $parserRequestData['categories'] = [];

        $this->getModelConverter()->setData($parserRequestData, $parserRequestModel);

        $this->assertEmpty($parserRequestModel->getCategories());

        $this->manager->completeCategoriesList($parserRequestModel);

        $requestCategories = $parserRequestModel->getCategories();

        $this->assertIsArray($requestCategories);
        $this->assertNotEmpty($requestCategories);

        $firstCategory = $requestCategories[key($requestCategories)];

        $this->assertNotNull($firstCategory);
        $this->assertInstanceOf(\App\Model\Category::class, $firstCategory);
    }

    public function testUpdateEntity()
    {
        $nonExistingEntityName1 = 'TEST CATEGORY - '.StringHelper::randomStr(16);
        $nonExistingEntityName2 = 'TEST CATEGORY - '.StringHelper::randomStr(16);
        $nonExistingEntity = new Category();
        $nonExistingEntity->setName($nonExistingEntityName1);

        // check if non-existing entity has been created
        $this->manager->updateEntity($nonExistingEntity);

        /** @var Category $checkEntity1 */
        $checkEntity1 = $this->manager->getOneBy(['name' => $nonExistingEntityName1]);

        $this->assertNotNull($checkEntity1, "Test non-existing entity has not been created :(");

        $checkEntity1->setName($nonExistingEntityName2);

        // check if new created entity has been updated
        $this->manager->updateEntity($checkEntity1);

        /** @var Category $checkEntity2 */
        $checkEntity2 = $this->manager->getOneBy(['name' => $nonExistingEntityName2]);

        $this->assertNotNull($checkEntity2);
        $this->assertEquals($nonExistingEntityName2, $checkEntity2->getName());

        $this->manager->remove($checkEntity2);
    }

    public function testRemoveEntity()
    {
        $nonExistingEntityName = 'TEST CATEGORY - '.StringHelper::randomStr(16);
        $nonExistingEntity = new Category();
        $nonExistingEntity->setName($nonExistingEntityName);

        $this->manager->save($nonExistingEntity);

        $checkEntity1 = $this->manager->getOneBy(['name' => $nonExistingEntityName]);

        $this->assertNotEmpty($checkEntity1);

        $this->manager->remove($checkEntity1);

        $checkEntity2 = $this->manager->getOneBy(['name' => $nonExistingEntityName]);

        $this->assertEmpty($checkEntity2);
    }
}